generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  output          = "../src/generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model Referral {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  type         String // 'au_pair', 'host_family', 'english_student'
  status       String   @default("pending") // 'pending', 'approved', 'rejected'
  referredBy   String   @db.Uuid
  name         String
  email        String
  phone        String
  nationality  String
  age          Int
  englishLevel String // 'beginner', 'intermediate', 'advanced', 'fluent'
  experience   String   @db.Text
  availability String
  notes        String?  @db.Text

  // Au Pair specific fields
  auPairDetails         AuPairDetails?
  // Host Family specific fields
  hostFamilyDetails     HostFamilyDetails?
  // English Student specific fields
  englishStudentDetails EnglishStudentDetails?

  @@schema("public")
}

model AuPairDetails {
  id                  String   @id @default(cuid())
  referralId          String   @unique
  referral            Referral @relation(fields: [referralId], references: [id], onDelete: Cascade)
  childCareExperience String   @db.Text
  drivingLicense      Boolean
  preferredCountries  String[]

  @@schema("public")
}

model HostFamilyDetails {
  id            String   @id @default(cuid())
  referralId    String   @unique
  referral      Referral @relation(fields: [referralId], references: [id], onDelete: Cascade)
  location      String
  childrenCount Int
  requirements  String   @db.Text

  @@schema("public")
}

model EnglishStudentDetails {
  id         String   @id @default(cuid())
  referralId String   @unique
  referral   Referral @relation(fields: [referralId], references: [id], onDelete: Cascade)
  goals      String   @db.Text
  schedule   String

  @@schema("public")
}
